rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{uid} {
      // Allow read and create [uid] document if logged in and if current user id (uid) is 
      // the same as data in [uid] field of a document with name as in username field from request
      // in [usernames] collection 
      allow read, create: if request.auth != null && request.auth.uid == uid;
      // allow read, create: if request.auth != null && request.auth.uid == uid && ;

      // allow read, create: if request.auth != null && request.auth.uid == uid && request.auth.uid == getAfter(/databases/{database}/documents/usernames/$(request.resource.data.username)).data.uid;
      // allow delete, update: if request.auth != null && request.auth.uid == resource.data.owner;
    }

    match /usernames/{username} {
      // 1) user is authenticated
      // 2) user creates document with pointer to his uid document that will be created soon
      // 3) user yet do not have his record in users collection (prevent user from having multiple usernames)
      // 4) TODO: user possiply can create multiple username records before creating record in users collection
      allow create, read: if true; 
      
      // getAfter(
      //   /databases/{database}/documents/usernames/$(request.auth.uid)
      //   ).data.username != null && getAfter(
      //     /databases/{database}/documents/usernames/$(request.resource.data.username)
      //     ).data.uid != null;
      // allow create: if request.auth != null && request.auth.uid == request.resource.data.uid && get(/databases/{database}/documents/users/$(request.auth.uid)).data == null && getAfter(/databases/{database}/documents/users/$(request.auth.uid)).data != null;
    }
  }
}